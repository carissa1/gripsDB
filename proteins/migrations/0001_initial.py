# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-12-11 23:58
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import proteins.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('references', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BleachMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('rate', models.FloatField(help_text='Photobleaching rate', verbose_name='Bleach Rate')),
                ('modality', models.CharField(blank=True, help_text='Type of microscopy/illumination used for measurement', max_length=100, verbose_name='Illumination Modality')),
                ('reference', models.ForeignKey(blank=True, help_text='Reference where the measurement was made', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bleach_measurement', to='references.Reference', verbose_name='Measurement Reference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FRETpair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('radius', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'FRET Pair',
            },
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('tax_id', models.CharField(help_text='NCBI Taxonomy ID (e.g. 6100 for Aequorea victora)', max_length=8, verbose_name='Taxonomy ID')),
                ('scientific_name', models.CharField(blank=True, max_length=128)),
                ('division', models.CharField(blank=True, max_length=128)),
                ('common_name', models.CharField(blank=True, max_length=128)),
                ('species', models.CharField(blank=True, max_length=128)),
                ('genus', models.CharField(blank=True, max_length=128)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organism_author', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organism_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organism',
            },
        ),
        migrations.CreateModel(
            name='Protein',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('uncurated', 'uncurated'), ('curated', 'curated'), ('rejected', 'rejected')], default='uncurated', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(db_index=True, help_text='Name of the fluorescent protein', max_length=128)),
                ('slug', models.SlugField(help_text='URL slug for the protein', max_length=64, unique=True)),
                ('base_name', models.CharField(max_length=128)),
                ('seq', models.CharField(blank=True, help_text='Amino acid sequence', max_length=512, null=True, unique=True)),
                ('gb_prot', models.CharField(blank=True, default='', help_text='GenBank protein Accession number (e.g. AFR60231)', max_length=10)),
                ('gb_nuc', models.CharField(blank=True, default='', max_length=10)),
                ('ipg_id', models.CharField(blank=True, help_text='Identical Protein Group ID at Pubmed', max_length=12, null=True, unique=True, verbose_name='IPG ID')),
                ('mw', models.FloatField(blank=True, help_text='Molecular Weight', null=True)),
                ('agg', models.CharField(blank=True, choices=[('m', 'Monomer'), ('d', 'Dimer'), ('td', 'Tandem dimer'), ('wd', 'Weak dimer'), ('t', 'Tetramer')], help_text='Oligomerization tendency', max_length=2)),
                ('switch_type', models.CharField(blank=True, choices=[('b', 'Basic'), ('pa', 'Photoactivatable'), ('ps', 'Photoswitchable'), ('pc', 'Photoconvertible'), ('t', 'Timer'), ('o', 'Other')], help_text='Photoswitching type (basic if none)', max_length=2, verbose_name='Type')),
                ('blurb', models.CharField(blank=True, help_text='Brief descriptive blurb', max_length=512)),
                ('FRET_partner', models.ManyToManyField(blank=True, through='proteins.FRETpair', to='proteins.Protein')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proteins_author', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('uncurated', 'uncurated'), ('curated', 'curated'), ('rejected', 'rejected')], default='uncurated', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('name', models.CharField(default='default', max_length=64)),
                ('slug', models.SlugField(help_text='Unique slug for the state', max_length=128, unique=True)),
                ('is_dark', models.BooleanField(default=False, help_text='This state does not fluorescence', verbose_name='Dark State')),
                ('ex_max', models.IntegerField(blank=True, null=True)),
                ('em_max', models.IntegerField(blank=True, null=True)),
                ('ex_spectra', proteins.models.SpectrumField(blank=True, help_text='Spectrum information as a list of (wavelength, value) pairs, e.g. [(300, 0.5), (301, 0.6),... ]', null=True)),
                ('em_spectra', proteins.models.SpectrumField(blank=True, help_text='Spectrum information as a list of (wavelength, value) pairs, e.g. [(300, 0.5), (301, 0.6),... ]', null=True)),
                ('ext_coeff', models.IntegerField(blank=True, help_text='Extinction Coefficient', null=True)),
                ('qy', models.FloatField(blank=True, help_text='Quantum Yield', null=True)),
                ('pka', models.FloatField(blank=True, null=True, verbose_name='pKa')),
                ('maturation', models.FloatField(blank=True, help_text='Maturation time (s)', null=True)),
                ('lifetime', models.FloatField(blank=True, help_text='Fluorescence Lifetime (ns)', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='state_author', to=settings.AUTH_USER_MODEL)),
                ('protein', models.ForeignKey(help_text='The protein to which this state belongs', on_delete=django.db.models.deletion.CASCADE, related_name='states', to='proteins.Protein')),
            ],
            options={
                'verbose_name': 'State',
            },
        ),
        migrations.CreateModel(
            name='StateTransition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('trans_wave', models.IntegerField(blank=True, help_text="Wavelength of light that drives the protein into the 'To state:' (if applicable)", null=True, verbose_name='Transition Wavelength')),
                ('from_state', models.ForeignKey(help_text='The initial state required for this transition to occur', on_delete=django.db.models.deletion.CASCADE, related_name='transitions_from', to='proteins.State', verbose_name='From state')),
                ('protein', models.ForeignKey(help_text='The protein that demonstrates this transition', on_delete=django.db.models.deletion.CASCADE, related_name='transitions', to='proteins.Protein', verbose_name='Protein Transitioning')),
                ('to_state', models.ForeignKey(blank=True, help_text="The state to which this state transitions upon 'transition wavelength' illumination", on_delete=django.db.models.deletion.CASCADE, related_name='transitions_to', to='proteins.State', verbose_name='To state')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='state',
            name='transitions',
            field=models.ManyToManyField(blank=True, related_name='transition_state', through='proteins.StateTransition', to='proteins.State', verbose_name='State Transitions'),
        ),
        migrations.AddField(
            model_name='state',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='state_modifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='protein',
            name='default_state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_protein', to='proteins.State'),
        ),
        migrations.AddField(
            model_name='protein',
            name='parent_organism',
            field=models.ForeignKey(blank=True, help_text='Organism from which the protein was engineered', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proteins', to='proteins.Organism', verbose_name='Parental organism'),
        ),
        migrations.AddField(
            model_name='protein',
            name='primary_reference',
            field=models.ForeignKey(blank=True, help_text='Preferably the publication that introduced the protein', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_proteins', to='references.Reference', verbose_name='Primary Reference'),
        ),
        migrations.AddField(
            model_name='protein',
            name='references',
            field=models.ManyToManyField(blank=True, related_name='proteins', to='references.Reference', verbose_name='References'),
        ),
        migrations.AddField(
            model_name='protein',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proteins_modifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='acceptor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='FK_FRETacceptor_protein', to='proteins.Protein', verbose_name='acceptor'),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='FRETpair_author', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='donor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='FK_FRETdonor_protein', to='proteins.Protein', verbose_name='donor'),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='pair_references',
            field=models.ManyToManyField(blank=True, related_name='FK_FRETpair_reference', to='references.Reference'),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='FRETpair_modifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bleachmeasurement',
            name='state',
            field=models.ForeignKey(help_text='The protein (state) for which this measurement was observed', on_delete=django.db.models.deletion.CASCADE, related_name='bleach_measurement', to='proteins.State', verbose_name='Protein (state)'),
        ),
    ]
